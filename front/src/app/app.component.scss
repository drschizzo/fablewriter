@import url("https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap");

:root {
  // colors______________
  // dark
  --clr-body-dark: white;
  --clr-bg-dark: black;
  // light
  --clr-body-light: black;
  --clr-bg-light: hsl(0, 0%, 100%);

  --foreground: var(--clr-body-light);
  --background: var(--clr-body-dark);

  --clr-green-500:#18534F;
  --clr-green-400:#226D68;
  --clr-green-100:#ECF8F6;

  --clr-gold-400:#D6955B;
  --clr-gold-200:#FEEAA1;

  // font-family
  --ff-primary: "Poppins", sans-serif;

  --ff-body: var(--ff-primary);
  --ff-heading: var(--ff-primary);
  
  // font-weight
  --fw-regular: 400;
  --fw-semi-bold: 500;
  --fw-bold: 700;
}

@media (prefers-color-scheme: light) {
  :root {
    --background: var(--clr-bg-light);
    --foreground: var(--clr-bg-dark);
  }
}
/* RESET____________________________________________________________ */
/* https://piccalil.li/blog/a-modern-css-reset */

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
* {
  margin: 0;
  padding: 0;
  font: inherit;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

html,
body {
  min-height: 100%;
  overflow-x: hidden;
}

/* Set core body defaults */
body {
  text-rendering: optimizeSpeed;
  line-height: 1.5;

}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture,
svg {
  max-width: 100%;
  display: block;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
/* RESET____________________________________________________________ */

/* general styling_________________________________________________ */

html {
  color-scheme: light dark;
  scroll-behavior: smooth;
}

body {
  font-size: 1.06825rem;
  font-weight: 500;
  font-family: var(--ff-body);
  color: var(--clr-body-light);
  background-color: var(--clr-bg-light);
}

section {
  // border: 1px solid red;
  padding-block: min(10vh, 10rem);
}

.container {
  border:1px solid orange;
  --max-width: 1110px;
  --container-padding: 1rem;

  width: min(var(--max-width), 100% - (var(--container-padding) * 2));
  margin-inline: auto;
}
/* skip to main content */
.skip-nav-link{
  background: black;
  padding:0.5rem 1.5rem;
  border-radius: 0 0 0.25rem 0.25rem;
  position:absolute;
  left:0.5rem;
  transform: translateY(-150%);
  transition: transform 325ms ease-in;
}

.skip-nav-link:focus{
  transform: translateY(0);
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap; /* added line */
  border: 0;
}

h1 {
  font-size: clamp(2.7994rem, 1.8077rem + 4.9585vw, 5.3406rem);
  font-weight: 700;
  line-height: 1.1;
}
h2 {
  font-size: clamp(1.85rem, 1rem + 4vw, 3rem);
}

h3 {
  font-size: clamp(1.15rem, 1rem + 3vw, 1.25rem);
}

a:not([class]) {
  color: inherit;
  opacity: 0.7;
  &:hover,
  &:focus {
    opacity: 1;
  }
}

p:not([class]) {
  opacity: 0.7;
  max-width: 48ch;
}

p[data-width="wide"] {
  max-width: 42ch;
  // overflow-wrap: break-word;
  // hyphens: auto;
}

:where(ul, ol):where([role="list"]) {
  margin: 0;
  padding: 0;
  list-style: none;
}


// header_____________________________
nav ul {
	--_gap: 2rem;
	display: flex;
	margin: 0;
	padding: 0;
	list-style: none;
}

nav a {
	color: inherit;
	opacity: 0.7;
	text-decoration: none;
	font-weight: 500;
}

nav a:hover,
nav a:focus-visible {
	opacity: 1;
}

nav li {
	overflow: hidden;
	position: relative;
	padding: calc(var(--_gap) / 2);
	min-inline-size: 3rem;
}

nav li::after {
	content: '';
	position: absolute;
	inset-inline: 0;
	inset-block-end: 0;
	block-size: 3px;
	background-color: cyan;

	translate: var(--_translate, 0);
	scale: var(--_scale, 0) 1;
	transition:
		scale 100ms var(--_scale-delay, 0ms), 
		translate 200ms;
}

/* A previous sibling is hovered */
nav li:hover ~ li {
	--_translate: -100%;
	--_scale-delay: 200ms;
}

/* Any other sibling is hovered */
nav:hover li {
	--_translate: 100%;
	--_scale-delay: 200ms;
}

/*
  The actually hovered <li>

  NOTE: same specificity as previous selector, so it must either come after or be artificially inflated (eg. :hover:hover)
*/
nav li:hover {
	--_scale: 1;
	--_translate: 0;
	--_scale-delay: 0ms;
}
